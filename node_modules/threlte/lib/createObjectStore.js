import { onDestroy } from 'svelte';
import { get, writable } from 'svelte/store';
/**
 * A store that only ever updates if the objects are actually different.
 * ### Example
 *
 * ```ts
 * const store = createObjectStore(object)
 * store.set(sameObject) // will not update
 * store.set(otherObject) // will update
 * ```
 * @param object
 * @returns store
 */
export const createObjectStore = (object) => {
    const objectStore = writable(object);
    let unwrappedObject = object;
    const unsubscribeObjectStore = objectStore.subscribe((o) => (unwrappedObject = o));
    onDestroy(unsubscribeObjectStore);
    const set = (newObject) => {
        if (newObject.uuid === unwrappedObject.uuid)
            return;
        objectStore.set(newObject);
    };
    return {
        ...objectStore,
        set
    };
};
